% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/florabank_queries.R
\name{florabank_observations}
\alias{florabank_observations}
\title{Get all validated observations for one or more taxa from the florabank database}
\usage{
florabank_observations(connection, scient_name, dutch_name,
  collect = FALSE)
}
\arguments{
\item{connection}{A connection to the florabank database. See the example
section for how to connect and disconnect to the database.}

\item{scient_name}{Default missing. Can be either a character vector with
exact scientific names (including authorship) or a character string with
(part of) a taxon name which may contain wildcards}

\item{dutch_name}{Default missing. Can be either a character vector with
exact Dutch names or a character string with (part of) a taxon name which
may contain wildcards}

\item{collect}{If FALSE (the default), a remote tbl object is returned. This
is like a reference to the result of the query but the full result of the
query is not brought into memory. If TRUE the full result of the query is
collected (fetched) from the database and brought into memory of the working
environment.}
}
\value{
A dataframe with the following variables: "NaamNederlands",
"NaamWetenschappelijk", "Bron", "BeginDatum", "EindDatum", "hok",
"Toponiem", "CommentaarTaxon", "CommentaarHabitat",
"WaarnemingID", "X_waarneming", "Y_waarneming", "X_meting", "Y_meting"
}
\description{
This function takes as input either a character vector or a character string
of scientific names and/or Dutch names. In case of a character string,
partial matching will be used so that part of a scientific name or Dutch name
can be given and wildcards can be used. The function queries the florabank,
and returns a dataframe with observation level information about the matching taxa.
The following wildcards may be used within the input parameters in case a
a character string is given:
\itemize{
\item \code{\%}: Represents zero or more characters;
\item \code{_}: Represents a single character;
\item \code{[]}: Represents any single character within the brackets, e.g. \code{[sp]}
\item \code{^}: Represents any character not in the brackets, e.g. \code{[^sp]}
\item \code{-}: Represents a range of characters, e.g. \code{[a-z]}
}
}
\examples{
\dontrun{
# code can only be run if a connection to the database is possible
# connect to florabank
db_connectie <- connect_inbo_dbase("D0021_00_userFlora")

# query and collect the data using scientific name
succprat1 <-	florabank_observations(db_connectie,
scient_name = 'Succisa pratensis Moench', collect = TRUE)

# the same species but using Dutch name
succprat2 <-	florabank_observations(db_connectie,
dutch_name = 'Blauwe knoop', collect = TRUE)

# providing both a Dutch name and scientific name will not duplicate records
# if they are the same species
succprat3 <- florabank_observations(db_connectie,
scient_name = 'Succisa pratensis Moench',
dutch_name = 'Blauwe knoop', collect = TRUE)

all.equal(succprat1, succprat2)
all.equal(succprat1, succprat3)

# passing dutch names and scientific names for different species
# is possible (records for each species is returned)
myspecies1 <- florabank_observations(db_connectie,
scient_name = 'Succisa pratensis Moench',
dutch_name = 'Gevlekte orchis', collect = TRUE)

# passing multiple dutch names
myspecies2 <- florabank_observations(db_connectie,
dutch_name = c('Gevlekte orchis', 'Blauwe knoop'),
collect = TRUE)

all.equal(myspecies1, myspecies2)

# use wildcards to retrieve all partial matches to a name
# using default for collect will return a lazy query
dactmacu <-	florabank_observations(db_connectie,
scient_name = 'Dactylorhiza maculata\%')

# to collect the data for a lazy query you can also do:
dactmacu <- collect(dactmacu)

# disconnect from florabank
dbDisconnect(db_connectie)
}
}
\seealso{
Other florabank: \code{\link{florabank_taxon_ifbl_year}},
  \code{\link{florabank_traits}}
}
\concept{florabank}
